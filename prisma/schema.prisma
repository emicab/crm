generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  logoUrl   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  sku           String?        @unique
  description   String?
  pricePurchase Decimal
  priceSale     Decimal
  quantityStock Int
  stockMinAlert Int?
  brandId       Int
  categoryId    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category       @relation(fields: [categoryId], references: [id])
  brand         Brand          @relation(fields: [brandId], references: [id])
  SaleItem      SaleItem[]
  purchaseItems PurchaseItem[]
}

model Client {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String?  @unique
  phone     String?
  address   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]

  @@index([firstName, lastName])
}

model Seller {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String?  @unique
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Sale {
  id                  Int            @id @default(autoincrement())
  saleDate            DateTime       @default(now())
  totalAmount         Decimal
  paymentType         PaymentType
  notes               String?
  clientId            Int?
  sellerId            Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  discountCodeApplied String?
  seller              Seller         @relation(fields: [sellerId], references: [id])
  client              Client?        @relation(fields: [clientId], references: [id])
  items               SaleItem[]
}

model SaleItem {
  id          Int     @id @default(autoincrement())
  quantity    Int
  priceAtSale Decimal
  purchasePriceAtSale Decimal
  saleId      Int
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
  sale        Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@unique([saleId, productId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  expenseDate DateTime @default(now())
  description String
  amount      Decimal
  category    String
  paymentType PaymentType
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  contactPerson String?  // Nombre de la persona de contacto
  email         String?
  phone         String?
  address       String?
  notes         String?

  purchases     Purchase[] // Un proveedor puede estar asociado a muchas compras

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Purchase {
  id            Int      @id @default(autoincrement())
  purchaseDate  DateTime @default(now())
  totalAmount   Decimal  // Costo total de la compra
  status        PurchaseStatus @default(PENDING) // Estado de la compra
  invoiceNumber String?  // Número de factura del proveedor (opcional)
  notes         String?

  supplierId    Int
  supplier      Supplier @relation(fields: [supplierId], references: [id])

  items         PurchaseItem[] // Los productos comprados en esta transacción

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PurchaseItem {
  id            Int     @id @default(autoincrement())
  quantity      Int     // Cantidad de unidades compradas
  purchasePrice Decimal // Costo por unidad en esta compra específica

  purchaseId    Int
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  productId     Int
  product       Product  @relation(fields: [productId], references: [id])
}

enum PaymentType {
  CASH
  TRANSFER
  CARD
  OTHER
}

enum PurchaseStatus {
  PENDING   
  RECEIVED  
  CANCELLED 
}